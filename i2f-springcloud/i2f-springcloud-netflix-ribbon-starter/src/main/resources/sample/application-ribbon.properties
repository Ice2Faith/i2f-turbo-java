# ribbon 配置
i2f.springcloud.ribbon.enable=true

# 均衡配置
ribbon.read-timeout=20000
ribbon.connect-timeout=60000

# #########################
# 全局负载均衡策略配置
# 这种方式时全局的配置，也就是对所有有效
# 在自定义负载均衡策略时，只需要配置一个实现了IRule接口的Bean即可
# 但是这个bean注册到环境中的name必须为iRule
# 具体参考NacosRuleConfig.java中的使用


# 有哪些负载均衡策略可以使用
# RandomRule 随机
# RoundRobinRule 线性轮转
# RetryRule 重试
# WeightedResponseTimeRule 响应时间权重
# BestAvailableRule 并发请求最小且可用
# ZoneAvoidanceRule 地理最近优先，无地理概念时随机，默认规则


# #########################
# 单独针对某个Client配置
# 这里的client-name就是负载均衡的值，比如：test-svc
${client-name}.ribbon.NFLoadBalancerRuleClassName=com.alibaba.cloud.nacos.ribbon.NacosRule

# 也可以使用代码的方式配置

# 在启动类上指定
# @RibbonClients(value={
#   @RibbonClient(name="test-svc",configuration=TestSvcRibbonConfig.class)
# })

# 对应的配置类,这个类不能被自动扫描到，否则就会变成全局配置
# 但是 @Configuration 注解是必须的
# @Configuration
# public class TestSvcRibbonConfig{
#   @Bean
#    public IRule iRule(){
#        return new RandomRule();
#    }
# }
