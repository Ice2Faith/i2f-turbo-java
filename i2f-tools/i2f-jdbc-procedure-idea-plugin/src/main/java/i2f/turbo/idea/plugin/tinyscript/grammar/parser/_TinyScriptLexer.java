/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package i2f.turbo.idea.plugin.tinyscript.grammar.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static i2f.turbo.idea.plugin.tinyscript.grammar.psi.TinyScriptTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_TinyScriptLexer.flex</tt>
 */
public class _TinyScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\13\1\2\2\1\1\3\22\0\1\13\1\72\1\15\1\0\1\31\1\60\1\74\1\17\1\52\1"+
    "\53\1\6\1\65\1\54\1\36\1\12\1\5\1\41\7\45\2\11\1\56\1\55\1\71\1\67\1\66\1"+
    "\57\1\0\1\43\1\46\2\43\1\35\1\37\2\10\1\105\1\10\1\103\1\40\5\10\1\16\1\10"+
    "\1\44\3\10\1\42\1\104\1\10\1\47\1\14\1\50\1\0\1\34\1\7\1\25\1\77\1\30\1\75"+
    "\1\23\1\24\1\70\1\100\1\61\1\10\1\102\1\26\1\10\1\51\1\62\1\64\1\73\1\21\1"+
    "\27\1\20\1\22\1\10\1\101\1\42\1\63\1\10\1\32\1\76\1\33\7\0\1\1\32\0\1\4\337"+
    "\0\1\4\177\0\13\4\35\0\2\1\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\1\1\5\1\1\7\5\1\10\1\11\1\12"+
    "\1\13\1\6\1\14\1\15\1\5\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\5\1\25\1\26\1\27"+
    "\1\5\1\30\1\31\1\1\1\5\1\32\3\5\6\0"+
    "\1\33\1\0\1\33\1\6\2\0\1\34\4\0\1\35"+
    "\5\5\1\36\3\5\1\37\1\5\1\40\3\5\1\0"+
    "\3\33\1\5\1\41\1\5\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\5"+
    "\1\55\3\5\1\56\4\0\1\57\1\60\1\0\2\34"+
    "\2\0\1\61\1\62\1\35\1\5\1\63\6\5\1\64"+
    "\1\65\1\66\4\5\1\67\1\70\1\71\1\72\1\5"+
    "\1\73\1\74\1\75\1\5\1\76\4\5\1\77\4\0"+
    "\1\100\1\0\1\57\2\60\3\0\1\61\1\101\3\5"+
    "\1\102\3\5\1\103\2\5\1\70\1\71\1\72\1\104"+
    "\6\5\5\0\1\105\1\0\1\60\3\0\1\5\1\106"+
    "\3\5\1\107\1\110\1\5\1\111\2\5\1\112\1\113"+
    "\1\5\2\0\1\100\1\105\1\0\1\114\1\115\6\5"+
    "\1\116\1\0\1\117\1\120\1\121\4\5\1\122\1\123"+
    "\1\5\1\124\1\125\1\5\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\106\0\u0118\0\u015e\0\u01a4"+
    "\0\106\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\106\0\106\0\106\0\u04ec"+
    "\0\106\0\106\0\u0532\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\106\0\u0578\0\u05be\0\106\0\u0604\0\u064a\0\u0690"+
    "\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0"+
    "\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0"+
    "\0\u0b36\0\u0aaa\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0276"+
    "\0\u0cda\0\106\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u015e"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u015e\0\u0f50\0\u0f96\0\u0fdc\0\u1022"+
    "\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252"+
    "\0\u015e\0\u015e\0\u1298\0\u015e\0\106\0\106\0\u12de\0\106"+
    "\0\106\0\106\0\106\0\u1324\0\106\0\u136a\0\u13b0\0\u13f6"+
    "\0\106\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\106\0\u0b7c\0\u1626\0\u166c\0\106\0\u0c94\0\u0276\0\u16b2"+
    "\0\u015e\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u015e\0\u015e\0\u18e2\0\u1928\0\u196e\0\u19b4\0\106\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u015e\0\u015e\0\u1b12\0\u1b58\0\u015e"+
    "\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\106\0\u1cb6\0\u1cfc\0\u1d42"+
    "\0\u1d88\0\u1dce\0\u1e14\0\106\0\u0aaa\0\u1e5a\0\u1ea0\0\u1ee6"+
    "\0\u1f2c\0\u0c4e\0\u015e\0\u1f72\0\u1fb8\0\u1ffe\0\u015e\0\u2044"+
    "\0\u208a\0\u20d0\0\u015e\0\u2116\0\u215c\0\u0aaa\0\u0aaa\0\u0aaa"+
    "\0\u015e\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\106\0\u2530"+
    "\0\u2576\0\u25bc\0\u2602\0\u015e\0\u2648\0\u268e\0\u26d4\0\u015e"+
    "\0\u015e\0\u271a\0\u015e\0\u2760\0\u27a6\0\u015e\0\u015e\0\u27ec"+
    "\0\u2832\0\u2878\0\u28be\0\106\0\u2904\0\u015e\0\u015e\0\u294a"+
    "\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2832\0\u2aee\0\u2904"+
    "\0\u015e\0\u015e\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\106\0\u015e"+
    "\0\u2c4c\0\u015e\0\u015e\0\u2c92\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\3\1\2\1\12\1\13\1\14\1\15\1\16\1\7"+
    "\1\17\1\20\1\21\1\22\1\7\1\23\1\24\1\25"+
    "\1\26\2\7\1\27\2\7\1\30\3\7\1\10\1\7"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\2\7\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\7\1\53\1\54\1\55\1\56"+
    "\1\7\1\57\1\7\1\60\2\7\107\0\4\3\6\0"+
    "\1\3\77\0\1\61\1\62\106\0\1\63\106\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\11\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\10\0\1\67\1\10\1\70\3\0\1\67\1\0\3\67"+
    "\1\71\2\67\1\72\2\67\3\0\1\10\1\71\1\0"+
    "\1\67\1\72\1\10\3\67\1\10\1\67\2\0\1\67"+
    "\7\0\4\67\3\0\1\67\2\0\1\67\1\0\1\67"+
    "\1\0\7\67\14\73\1\74\1\75\70\73\10\0\2\7"+
    "\1\64\1\0\1\65\1\76\1\7\1\77\11\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\14\100\1\101\2\100\1\102\66\100\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\1\7\1\103\7\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\2\7\1\104\1\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\105\5\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\76\1\7\1\77\3\7\1\106\5\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\6\7\1\107\2\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\110\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\5\7\1\111\3\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\1\112\1\113\2\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\7\7\10\0\2\7\1\64\1\0\1\65"+
    "\1\0\1\7\1\0\7\7\1\114\1\7\3\0\2\7"+
    "\1\0\10\7\1\66\1\0\1\115\7\0\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\7\7\10\0"+
    "\2\7\1\64\1\0\1\65\1\0\1\7\1\0\1\116"+
    "\10\7\3\0\2\7\1\0\10\7\1\66\1\0\1\7"+
    "\7\0\4\7\3\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\7\7\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\5\7\1\117\1\120\2\7\3\0\2\7"+
    "\1\0\10\7\1\66\1\0\1\7\7\0\1\7\1\121"+
    "\2\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\32\0\1\122\63\0\1\67\1\10\1\70\3\0"+
    "\1\67\1\0\1\123\2\67\1\71\2\67\1\72\2\67"+
    "\3\0\1\10\1\71\1\0\1\67\1\72\1\10\1\124"+
    "\1\67\1\123\1\10\1\125\2\0\1\67\7\0\4\67"+
    "\3\0\1\67\2\0\1\67\1\0\1\67\1\0\1\125"+
    "\6\67\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\2\7\1\126\1\127\5\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\7\7\0\1\7\1\130\2\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\4\7\1\131\2\7\1\132\1\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\133\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\7\7\10\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\1\7\1\134"+
    "\7\7\3\0\2\7\1\0\10\7\1\66\1\0\1\7"+
    "\7\0\4\7\3\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\7\7\67\0\1\135\105\0\1\136\26\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\1\137\10\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\66\0\1\140\1\141\105\0\1\142\112\0\1\143"+
    "\21\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\3\7\1\144\5\7\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\76\0\1\145\17\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\1\7\1\146"+
    "\7\7\3\0\2\7\1\0\10\7\1\66\1\0\1\7"+
    "\7\0\4\7\3\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\7\7\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\11\7\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\147\5\7\10\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\11\7\3\0"+
    "\1\7\1\150\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\2\61\1\151\103\61\6\62\1\152\77\62\7\0"+
    "\1\153\106\0\1\7\5\0\1\7\1\0\11\7\3\0"+
    "\2\7\1\0\2\7\1\0\3\7\1\0\1\7\2\0"+
    "\1\7\7\0\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\7\7\1\154\3\0\102\154\11\0\1\155"+
    "\27\0\1\155\3\0\1\155\50\0\2\67\4\0\1\67"+
    "\1\0\11\67\3\0\2\67\1\0\10\67\2\0\1\67"+
    "\7\0\4\67\3\0\1\67\2\0\1\67\1\0\1\67"+
    "\1\0\7\67\11\0\1\156\27\0\1\156\3\0\1\156"+
    "\50\0\1\67\1\157\4\0\1\67\1\0\11\67\3\0"+
    "\2\67\1\160\2\67\1\157\3\67\1\157\1\67\2\0"+
    "\1\67\7\0\4\67\3\0\1\67\2\0\1\67\1\0"+
    "\1\67\1\0\7\67\14\73\1\74\1\161\104\73\1\74"+
    "\1\162\70\73\15\0\1\163\70\0\14\76\1\164\1\165"+
    "\70\76\17\77\1\166\66\77\14\100\1\101\2\100\1\167"+
    "\66\100\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\2\7\1\170\6\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\2\7\1\171\1\7\3\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\7\7\10\0"+
    "\2\7\1\64\1\0\1\65\1\0\1\7\1\0\11\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\3\7\1\172\3\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\7\7\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\1\7\1\173\7\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\7\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\7\7\10\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\1\174\10\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\7\7\1\175\1\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\6\7\1\176\2\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\11\7\3\0\2\7\1\0\10\7\1\66\1\0"+
    "\1\177\7\0\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\7\7\10\0\2\7\1\64\1\0\1\65"+
    "\1\0\1\7\1\0\1\7\1\200\7\7\3\0\2\7"+
    "\1\0\10\7\1\66\1\0\1\7\7\0\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\7\7\10\0"+
    "\2\7\1\64\1\0\1\65\1\0\1\7\1\0\11\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\201\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\3\7\1\202\5\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\1\203\6\7\1\204"+
    "\1\7\3\0\2\7\1\0\10\7\1\66\1\0\1\7"+
    "\7\0\4\7\3\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\7\7\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\5\7\1\205\3\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\7\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\7\7\10\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\11\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\206\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\33\122\1\207\52\122\10\0\2\67\4\0\1\67\1\0"+
    "\11\67\3\0\1\210\1\67\1\0\2\67\1\210\3\67"+
    "\1\210\1\67\2\0\1\67\7\0\4\67\3\0\1\67"+
    "\2\0\1\67\1\0\1\67\1\0\7\67\10\0\1\67"+
    "\1\211\4\0\1\67\1\0\3\67\3\211\2\67\1\211"+
    "\3\0\2\211\1\0\1\211\1\67\1\211\1\67\1\211"+
    "\1\67\2\211\2\0\1\67\7\0\4\67\3\0\1\67"+
    "\2\0\1\67\1\0\1\211\1\0\1\211\6\67\10\0"+
    "\2\67\4\0\1\67\1\0\11\67\3\0\1\212\1\67"+
    "\1\0\2\67\1\212\3\67\1\212\1\67\2\0\1\67"+
    "\7\0\4\67\3\0\1\67\2\0\1\67\1\0\1\67"+
    "\1\0\7\67\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\6\7\1\213\2\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\7\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\7\7\10\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\11\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\214\1\0\1\7\1\0\2\7"+
    "\1\215\4\7\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\1\216\10\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\7\7\1\217\1\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\3\7\1\220\5\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\11\7\3\0\2\7"+
    "\1\0\10\7\1\66\1\0\1\7\7\0\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\1\221\6\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\3\7\1\222\5\7\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\11\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\7\7\0\1\223\3\7\3\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\7\7\10\0"+
    "\2\7\1\64\1\0\1\65\1\0\1\7\1\0\11\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\5\7\1\224\1\7\5\62\1\225\1\152\77\62\2\0"+
    "\1\226\1\227\4\0\1\230\2\0\1\227\2\0\1\230"+
    "\1\0\11\230\3\0\2\230\1\0\2\230\1\0\3\230"+
    "\1\0\1\230\2\0\1\230\7\0\4\230\3\0\1\230"+
    "\2\0\1\230\1\0\1\230\1\0\7\230\30\0\1\231"+
    "\66\0\1\155\22\0\1\155\4\0\1\155\3\0\1\155"+
    "\2\0\1\232\46\0\1\156\11\0\1\233\1\234\7\0"+
    "\1\156\1\233\1\0\1\234\1\0\1\156\3\0\1\156"+
    "\50\0\1\67\1\157\4\0\1\67\1\0\6\67\1\235"+
    "\2\67\3\0\1\157\1\67\1\0\1\67\1\235\1\157"+
    "\3\67\1\157\1\67\2\0\1\67\7\0\4\67\3\0"+
    "\1\67\2\0\1\67\1\0\1\67\1\0\7\67\11\0"+
    "\1\236\27\0\1\236\3\0\1\236\42\0\1\237\1\240"+
    "\4\0\1\241\2\0\1\240\2\0\1\241\1\0\11\241"+
    "\3\0\2\241\1\0\2\241\1\0\3\241\1\0\1\241"+
    "\2\0\1\241\7\0\4\241\3\0\1\241\2\0\1\241"+
    "\1\0\1\241\1\0\7\241\14\76\1\164\1\242\70\76"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\3\7\1\243\5\7\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\3\7\1\244\5\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\11\7\3\0\2\7\1\0\10\7\1\66\1\0\1\7"+
    "\7\0\1\7\1\245\2\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\2\7\1\246\6\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\3\7\1\247\5\7\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\7\7\1\170\1\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\5\7\1\250\3\7\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\3\7\1\251\5\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\10\7\1\252\3\0\2\7\1\0\10\7\1\66\1\0"+
    "\1\7\7\0\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\7\7\10\0\2\7\1\64\1\0\1\65"+
    "\1\0\1\7\1\0\1\253\10\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\7\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\7\7\10\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\7\7\1\254"+
    "\1\7\3\0\2\7\1\0\10\7\1\66\1\0\1\7"+
    "\7\0\4\7\3\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\7\7\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\1\255\10\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\67\4\0"+
    "\1\67\1\0\6\67\1\256\2\67\3\0\1\210\1\67"+
    "\1\0\1\67\1\256\1\210\3\67\1\210\1\67\2\0"+
    "\1\67\7\0\4\67\3\0\1\67\2\0\1\67\1\0"+
    "\1\67\1\0\7\67\10\0\1\67\1\211\4\0\1\67"+
    "\1\0\3\67\3\211\1\257\1\67\1\211\3\0\2\211"+
    "\1\0\1\211\1\257\1\211\1\67\1\211\1\67\2\211"+
    "\2\0\1\67\7\0\4\67\3\0\1\67\2\0\1\67"+
    "\1\0\1\211\1\0\1\211\6\67\10\0\2\67\4\0"+
    "\1\67\1\0\6\67\1\260\2\67\3\0\1\212\1\67"+
    "\1\0\1\67\1\260\1\212\3\67\1\212\1\67\2\0"+
    "\1\67\7\0\4\67\3\0\1\67\2\0\1\67\1\0"+
    "\1\67\1\0\7\67\10\0\2\7\1\64\1\0\1\65"+
    "\1\0\1\7\1\0\6\7\1\261\2\7\3\0\2\7"+
    "\1\0\10\7\1\66\1\0\1\7\7\0\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\7\7\10\0"+
    "\2\7\1\64\1\0\1\65\1\0\1\7\1\0\11\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\1\262\3\7\3\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\7\7\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\1\263\10\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\2\7\1\264\6\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\5\7\1\265\3\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\6\7\1\266\2\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\11\7\3\0\1\267\1\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\7\226\1\270\4\226\1\271"+
    "\71\226\2\0\1\226\1\227\7\0\1\227\74\0\1\226"+
    "\1\227\4\0\2\230\1\272\1\227\2\0\1\230\1\0"+
    "\11\230\3\0\2\230\1\0\10\230\2\0\1\230\7\0"+
    "\4\230\3\0\1\230\2\0\1\230\1\0\1\230\1\0"+
    "\7\230\26\0\1\273\71\0\1\274\104\0\1\275\24\0"+
    "\1\276\2\0\1\275\3\0\1\275\51\0\1\236\14\0"+
    "\1\277\5\0\1\236\3\0\1\277\1\236\3\0\1\236"+
    "\40\0\14\237\1\300\1\301\70\237\2\0\1\237\1\240"+
    "\7\0\1\240\74\0\1\237\1\240\4\0\2\241\1\302"+
    "\1\240\2\0\1\241\1\0\11\241\3\0\2\241\1\0"+
    "\10\241\2\0\1\241\7\0\4\241\3\0\1\241\2\0"+
    "\1\241\1\0\1\241\1\0\7\241\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\11\7\3\0\2\7"+
    "\1\0\10\7\1\66\1\0\1\7\7\0\1\7\1\303"+
    "\2\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\11\7\3\0\2\7\1\0\10\7\1\66\1\0"+
    "\1\7\7\0\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\304\4\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\1\7\1\305\7\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\6\7\1\306\2\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\5\7\1\307\3\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\11\7\3\0\2\7\1\0\10\7\1\66\1\0"+
    "\1\7\7\0\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\310\5\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\7\7\1\311\1\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\11\7\3\0\2\7\1\0\10\7\1\66\1\0"+
    "\1\7\7\0\1\312\3\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\11\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\313\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\7\7\10\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\5\7\1\314"+
    "\3\7\3\0\2\7\1\0\10\7\1\66\1\0\1\7"+
    "\7\0\4\7\3\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\7\7\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\11\7\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\315\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\11\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\7\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\1\316\3\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\3\7\1\317\5\7\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\11\7\3\0\1\7\1\320"+
    "\1\0\10\7\1\66\1\0\1\7\7\0\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\7\7\7\226"+
    "\1\321\4\226\1\271\72\226\3\0\102\226\10\0\1\230"+
    "\5\0\1\230\1\0\11\230\3\0\2\230\1\0\2\230"+
    "\1\0\3\230\1\0\1\230\2\0\1\230\7\0\4\230"+
    "\3\0\1\230\2\0\1\230\1\0\1\230\1\0\7\230"+
    "\25\0\1\322\70\0\1\323\5\0\1\323\1\0\11\323"+
    "\3\0\2\323\1\0\2\323\1\0\3\323\1\0\1\323"+
    "\2\0\1\323\7\0\4\323\3\0\1\323\2\0\1\323"+
    "\1\0\1\323\1\0\7\323\11\0\1\275\12\0\1\324"+
    "\7\0\1\275\2\0\1\324\1\0\1\275\3\0\1\275"+
    "\51\0\1\275\27\0\1\275\3\0\1\275\40\0\1\237"+
    "\3\0\116\237\1\300\1\325\70\237\10\0\1\241\5\0"+
    "\1\241\1\0\11\241\3\0\2\241\1\0\2\241\1\0"+
    "\3\241\1\0\1\241\2\0\1\241\7\0\4\241\3\0"+
    "\1\241\2\0\1\241\1\0\1\241\1\0\7\241\10\0"+
    "\2\7\1\64\1\0\1\65\1\0\1\7\1\0\4\7"+
    "\1\326\4\7\3\0\2\7\1\0\10\7\1\66\1\0"+
    "\1\7\7\0\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\7\7\10\0\2\7\1\64\1\0\1\65"+
    "\1\0\1\7\1\0\11\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\327\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\6\7\1\330\2\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\10\7\1\331\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\11\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\332\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\7\7\10\0\2\7"+
    "\1\64\1\0\1\65\1\0\1\7\1\0\11\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\333\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\11\7\3\0\2\7\1\0\10\7\1\66\1\0\1\7"+
    "\7\0\4\7\3\0\1\334\2\0\1\7\1\0\1\7"+
    "\1\0\7\7\10\0\2\7\1\64\1\0\1\65\1\0"+
    "\1\7\1\0\11\7\3\0\2\7\1\0\1\7\1\335"+
    "\6\7\1\66\1\0\1\7\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\7\7\7\226\1\336"+
    "\4\226\1\271\71\226\27\0\1\337\66\0\2\323\1\274"+
    "\3\0\1\323\1\0\11\323\3\0\2\323\1\0\10\323"+
    "\1\66\1\0\1\323\7\0\4\323\3\0\1\323\2\0"+
    "\1\323\1\0\1\323\1\0\7\323\14\237\1\300\1\340"+
    "\70\237\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\11\7\3\0\2\7\1\0\10\7\1\66\1\0"+
    "\1\7\7\0\2\7\1\341\1\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\11\7\3\0\2\7"+
    "\1\0\10\7\1\66\1\0\1\7\7\0\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\342"+
    "\5\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\2\7\1\343\6\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\10\7\1\344\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\3\7\1\345\5\7\3\0\2\7\1\0\10\7\1\66"+
    "\1\0\1\7\7\0\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\11\7\3\0\2\7\1\0"+
    "\10\7\1\66\1\0\1\7\7\0\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\6\7\1\346\27\0"+
    "\1\347\66\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\3\7\1\350\5\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\3\7\1\351\5\7"+
    "\3\0\2\7\1\0\10\7\1\66\1\0\1\7\7\0"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\10\0\2\7\1\64\1\0\1\65\1\0\1\7"+
    "\1\0\1\7\1\352\7\7\3\0\2\7\1\0\10\7"+
    "\1\66\1\0\1\7\7\0\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\10\0\2\7\1\64"+
    "\1\0\1\65\1\0\1\7\1\0\11\7\3\0\2\7"+
    "\1\0\1\353\7\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\10\0\2\7\1\64\1\0\1\65\1\0\1\7\1\0"+
    "\11\7\3\0\2\7\1\0\10\7\1\66\1\0\1\7"+
    "\7\0\1\7\1\354\2\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\10\0\2\7\1\64\1\0"+
    "\1\65\1\0\1\7\1\0\4\7\1\355\4\7\3\0"+
    "\2\7\1\0\10\7\1\66\1\0\1\7\7\0\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\0\7\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\13\1\3\11"+
    "\1\1\2\11\1\1\7\11\2\1\1\11\13\1\6\0"+
    "\1\1\1\0\2\1\2\0\1\1\4\0\1\11\17\1"+
    "\1\0\12\1\2\11\1\1\4\11\1\1\1\11\3\1"+
    "\1\11\4\0\2\1\1\0\1\11\1\1\2\0\1\11"+
    "\21\1\1\11\15\1\1\11\4\0\1\1\1\0\1\11"+
    "\2\1\3\0\26\1\5\0\1\1\1\0\1\11\3\0"+
    "\16\1\2\0\1\1\1\11\1\0\11\1\1\0\7\1"+
    "\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _TinyScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TinyScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
//    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 87: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 88: break;
          case 3: 
            { return OP_DIV;
            } 
            // fall through
          case 89: break;
          case 4: 
            { return OP_MUL;
            } 
            // fall through
          case 90: break;
          case 5: 
            { return NAMING;
            } 
            // fall through
          case 91: break;
          case 6: 
            { return TERM_CONST_NUMBER;
            } 
            // fall through
          case 92: break;
          case 7: 
            { return TERM_DOT;
            } 
            // fall through
          case 93: break;
          case 8: 
            { return TERM_DOLLAR;
            } 
            // fall through
          case 94: break;
          case 9: 
            { return TERM_CURLY_L;
            } 
            // fall through
          case 95: break;
          case 10: 
            { return TERM_CURLY_R;
            } 
            // fall through
          case 96: break;
          case 11: 
            { return OP_SUB;
            } 
            // fall through
          case 97: break;
          case 12: 
            { return TERM_BRACKET_SQUARE_L;
            } 
            // fall through
          case 98: break;
          case 13: 
            { return TERM_BRACKET_SQUARE_R;
            } 
            // fall through
          case 99: break;
          case 14: 
            { return TERM_PAREN_L;
            } 
            // fall through
          case 100: break;
          case 15: 
            { return TERM_PAREN_R;
            } 
            // fall through
          case 101: break;
          case 16: 
            { return TERM_COMMA;
            } 
            // fall through
          case 102: break;
          case 17: 
            { return TERM_SEMICOLON;
            } 
            // fall through
          case 103: break;
          case 18: 
            { return TERM_COLON;
            } 
            // fall through
          case 104: break;
          case 19: 
            { return TERM_QUESTION;
            } 
            // fall through
          case 105: break;
          case 20: 
            { return OP_MOD;
            } 
            // fall through
          case 106: break;
          case 21: 
            { return OP_ADD;
            } 
            // fall through
          case 107: break;
          case 22: 
            { return OP_GT;
            } 
            // fall through
          case 108: break;
          case 23: 
            { return OP_ASSIGN;
            } 
            // fall through
          case 109: break;
          case 24: 
            { return OP_LT;
            } 
            // fall through
          case 110: break;
          case 25: 
            { return OP_EXCLAM;
            } 
            // fall through
          case 111: break;
          case 26: 
            { return OP_VERTICAL_BAR;
            } 
            // fall through
          case 112: break;
          case 27: 
            { return WORD;
            } 
            // fall through
          case 113: break;
          case 28: 
            { return TERM_CONST_STRING;
            } 
            // fall through
          case 114: break;
          case 29: 
            { return TERM_CONST_STRING_SINGLE;
            } 
            // fall through
          case 115: break;
          case 30: 
            { return OP_EQ_STR;
            } 
            // fall through
          case 116: break;
          case 31: 
            { return OP_AS;
            } 
            // fall through
          case 117: break;
          case 32: 
            { return OP_LT_STR;
            } 
            // fall through
          case 118: break;
          case 33: 
            { return OP_NE_STR;
            } 
            // fall through
          case 119: break;
          case 34: 
            { return KEY_IF;
            } 
            // fall through
          case 120: break;
          case 35: 
            { return OP_IS;
            } 
            // fall through
          case 121: break;
          case 36: 
            { return OP_IN;
            } 
            // fall through
          case 122: break;
          case 37: 
            { return OP_OR_STR;
            } 
            // fall through
          case 123: break;
          case 38: 
            { return OP_GTE;
            } 
            // fall through
          case 124: break;
          case 39: 
            { return OP_EQ;
            } 
            // fall through
          case 125: break;
          case 40: 
            { return OP_GT_STR;
            } 
            // fall through
          case 126: break;
          case 41: 
            { return OP_NEQ;
            } 
            // fall through
          case 127: break;
          case 42: 
            { return OP_LTE;
            } 
            // fall through
          case 128: break;
          case 43: 
            { return OP_NE;
            } 
            // fall through
          case 129: break;
          case 44: 
            { return OP_AND;
            } 
            // fall through
          case 130: break;
          case 45: 
            { return OP_OR;
            } 
            // fall through
          case 131: break;
          case 46: 
            { return TERM_COMMENT_SINGLE_LINE;
            } 
            // fall through
          case 132: break;
          case 47: 
            { return TERM_CONST_NUMBER_FLOAT;
            } 
            // fall through
          case 133: break;
          case 48: 
            { return TERM_CONST_NUMBER_SCIEN_1;
            } 
            // fall through
          case 134: break;
          case 49: 
            { return TERM_CONST_STRING_RENDER;
            } 
            // fall through
          case 135: break;
          case 50: 
            { return TERM_CONST_STRING_RENDER_SINGLE;
            } 
            // fall through
          case 136: break;
          case 51: 
            { return KEY_TRY;
            } 
            // fall through
          case 137: break;
          case 52: 
            { return KEY_FOR;
            } 
            // fall through
          case 138: break;
          case 53: 
            { return OP_AND_STR;
            } 
            // fall through
          case 139: break;
          case 54: 
            { return OP_LTE_STR;
            } 
            // fall through
          case 140: break;
          case 55: 
            { return REF_EXPRESS;
            } 
            // fall through
          case 141: break;
          case 56: 
            { return TERM_CONST_NUMBER_OTC;
            } 
            // fall through
          case 142: break;
          case 57: 
            { return TERM_CONST_NUMBER_HEX;
            } 
            // fall through
          case 143: break;
          case 58: 
            { return TERM_CONST_NUMBER_BIN;
            } 
            // fall through
          case 144: break;
          case 59: 
            { return OP_NEQ_STR;
            } 
            // fall through
          case 145: break;
          case 60: 
            { return KEY_NEW;
            } 
            // fall through
          case 146: break;
          case 61: 
            { return OP_NOT;
            } 
            // fall through
          case 147: break;
          case 62: 
            { return OP_GTE_STR;
            } 
            // fall through
          case 148: break;
          case 63: 
            { return TERM_COMMENT_MULTI_LINE;
            } 
            // fall through
          case 149: break;
          case 64: 
            { return ROUTE_NAMING;
            } 
            // fall through
          case 150: break;
          case 65: 
            { return TERM_CONST_BOOLEAN;
            } 
            // fall through
          case 151: break;
          case 66: 
            { return KEY_ELSE;
            } 
            // fall through
          case 152: break;
          case 67: 
            { return OP_CAST;
            } 
            // fall through
          case 153: break;
          case 68: 
            { return TERM_CONST_NULL;
            } 
            // fall through
          case 154: break;
          case 69: 
            { return TERM_CONST_NUMBER_SCIEN_2;
            } 
            // fall through
          case 155: break;
          case 70: 
            { return KEY_THROW;
            } 
            // fall through
          case 156: break;
          case 71: 
            { return KEY_CATCH;
            } 
            // fall through
          case 157: break;
          case 72: 
            { return KEY_CLASS;
            } 
            // fall through
          case 158: break;
          case 73: 
            { return OP_NOT_IN;
            } 
            // fall through
          case 159: break;
          case 74: 
            { return KEY_BREAK;
            } 
            // fall through
          case 160: break;
          case 75: 
            { return KEY_WHILE;
            } 
            // fall through
          case 161: break;
          case 76: 
            { return OP_TYPE_OF;
            } 
            // fall through
          case 162: break;
          case 77: 
            { return KEY_RETURN;
            } 
            // fall through
          case 163: break;
          case 78: 
            { return TERM_CONST_STRING_MULTILINE;
            } 
            // fall through
          case 164: break;
          case 79: 
            { return TERM_CONST_STRING_MULTILINE_QUOTE;
            } 
            // fall through
          case 165: break;
          case 80: 
            { return KEY_FINALLY;
            } 
            // fall through
          case 166: break;
          case 81: 
            { return KEY_FOREACH;
            } 
            // fall through
          case 167: break;
          case 82: 
            { return TERM_CONST_TYPE_CLASS;
            } 
            // fall through
          case 168: break;
          case 83: 
            { return KEY_CONTINUE;
            } 
            // fall through
          case 169: break;
          case 84: 
            { return KEY_DEBUGGER;
            } 
            // fall through
          case 170: break;
          case 85: 
            { return KEY_ELIF;
            } 
            // fall through
          case 171: break;
          case 86: 
            { return OP_INSTANCE_OF;
            } 
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
