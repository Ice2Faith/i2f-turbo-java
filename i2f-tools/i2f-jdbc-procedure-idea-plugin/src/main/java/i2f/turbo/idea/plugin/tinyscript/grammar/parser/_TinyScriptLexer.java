// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TinyScriptLexer.flex

package i2f.turbo.idea.plugin.tinyscript.grammar.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static i2f.turbo.idea.plugin.tinyscript.grammar.psi.TinyScriptTypes.*;


public class _TinyScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\7\25"+
    "\2\26\1\27\1\30\1\31\1\32\1\33\1\34\1\0"+
    "\1\35\1\36\2\35\1\37\1\40\2\41\1\42\1\41"+
    "\1\43\1\44\5\41\1\45\1\41\1\46\3\41\1\47"+
    "\1\50\1\41\1\51\1\52\1\53\1\0\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\41\1\67\1\70\1\41\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\41\1\101\1\47"+
    "\1\102\1\41\1\103\1\104\1\105\7\0\1\3\32\0"+
    "\1\106\u01df\0\1\106\177\0\13\106\35\0\2\3\5\0"+
    "\1\106\57\0\1\106\240\0\1\106\377\0\u0100\107";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\3\26\1\27\1\30\1\1\16\26\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\2\0\1\36\1\37\1\0\1\40"+
    "\1\0\1\41\1\42\1\43\2\0\1\44\1\0\3\45"+
    "\1\17\2\45\1\46\1\47\1\50\1\51\3\0\1\26"+
    "\3\0\1\26\1\52\6\26\1\53\3\26\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\2\26\1\62\5\26\1\63"+
    "\1\35\1\0\1\35\1\64\1\40\1\0\1\65\1\66"+
    "\1\67\1\0\1\70\1\71\1\72\2\0\1\26\1\73"+
    "\1\0\1\74\1\0\1\75\11\26\1\76\1\77\1\26"+
    "\1\100\1\101\1\102\1\103\4\26\1\104\2\26\3\0"+
    "\1\105\1\0\1\66\1\67\2\70\1\71\1\72\1\106"+
    "\1\0\1\26\1\73\3\0\1\26\1\107\4\26\1\110"+
    "\4\26\1\111\2\26\1\112\2\26\4\0\1\113\1\70"+
    "\2\0\1\26\3\0\1\114\1\115\1\116\5\26\1\117"+
    "\1\26\1\120\1\26\1\121\1\0\1\113\1\106\1\0"+
    "\1\26\1\0\5\26\1\122\1\123\1\124\1\0\1\26"+
    "\1\125\2\26\1\126\1\127\1\26\1\130\1\131\1\132"+
    "\1\133\2\26\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\110\0\u0168\0\u01b0"+
    "\0\u01f8\0\u0240\0\110\0\110\0\u0288\0\u02d0\0\110\0\u0318"+
    "\0\110\0\u0360\0\u03a8\0\u03f0\0\110\0\110\0\u0438\0\u0480"+
    "\0\u04c8\0\110\0\u0510\0\u0558\0\u05a0\0\110\0\110\0\u05e8"+
    "\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828"+
    "\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\110\0\u0a20"+
    "\0\110\0\110\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\110\0\110"+
    "\0\u0240\0\110\0\u0b88\0\110\0\110\0\110\0\u0bd0\0\u0c18"+
    "\0\110\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0ca8\0\u0d80\0\u0dc8"+
    "\0\110\0\110\0\110\0\110\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8"+
    "\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u0510\0\u1050\0\u1098\0\u10e0"+
    "\0\u1128\0\u1170\0\u11b8\0\u0510\0\u1200\0\u1248\0\u1290\0\u12d8"+
    "\0\u0510\0\u1320\0\u0510\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u0510"+
    "\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\110\0\110\0\u15f0"+
    "\0\u0a68\0\110\0\u0240\0\u1638\0\110\0\u1680\0\u16c8\0\u1710"+
    "\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\110\0\u1908"+
    "\0\u0f78\0\u1950\0\u0510\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8"+
    "\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u0510\0\u1c68\0\u0510"+
    "\0\u0510\0\u0510\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u0510"+
    "\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\110\0\u1f80\0\110"+
    "\0\u0ca8\0\u1fc8\0\u0ca8\0\u0ca8\0\u0ca8\0\u2010\0\u2058\0\u20a0"+
    "\0\u0f30\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u0510\0\u2208\0\u2250"+
    "\0\u2298\0\u22e0\0\u0510\0\u2328\0\u2370\0\u23b8\0\u2400\0\u0510"+
    "\0\u2448\0\u2490\0\u0510\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8"+
    "\0\u2640\0\u2688\0\110\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u27f0"+
    "\0\u2838\0\u0510\0\u0510\0\u0510\0\u2880\0\u28c8\0\u2910\0\u2958"+
    "\0\u29a0\0\u0510\0\u29e8\0\u0510\0\u2a30\0\u0510\0\u2a78\0\110"+
    "\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8"+
    "\0\u2d00\0\u0510\0\u0510\0\u2a78\0\u2d48\0\u2d90\0\u2b98\0\u2dd8"+
    "\0\u2e20\0\u0510\0\u0510\0\u2e68\0\110\0\u0510\0\u0510\0\u0510"+
    "\0\u2eb0\0\u2ef8\0\u0510";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\6\33\1\34\1\33\1\35\3\33\1\36\1\2"+
    "\1\37\1\33\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\33\1\50\1\33\1\51\1\52\1\53"+
    "\2\33\1\54\1\33\1\55\1\33\1\56\1\33\1\57"+
    "\1\60\1\61\1\3\1\2\111\0\4\3\101\0\1\3"+
    "\33\0\1\62\55\0\6\63\1\64\43\63\1\65\35\63"+
    "\103\0\1\66\36\0\1\67\67\0\1\70\75\0\13\71"+
    "\1\72\36\71\1\73\35\71\32\0\1\74\107\0\1\75"+
    "\107\0\1\76\73\0\1\77\4\0\1\100\6\0\1\101"+
    "\77\0\1\102\1\0\3\24\6\0\1\103\1\104\1\105"+
    "\4\103\1\106\1\103\1\107\1\110\1\103\3\0\1\24"+
    "\1\0\1\103\1\104\2\103\1\105\5\103\1\106\6\103"+
    "\1\107\3\103\27\0\1\102\1\0\3\24\6\0\2\103"+
    "\1\105\4\103\1\106\4\103\3\0\1\24\1\0\4\103"+
    "\1\105\5\103\1\106\12\103\37\0\1\111\1\112\106\0"+
    "\1\113\107\0\1\114\77\0\1\115\1\0\3\33\6\0"+
    "\14\33\1\116\1\117\1\0\1\33\1\0\25\33\27\0"+
    "\1\115\1\0\3\33\6\0\2\33\1\120\11\33\1\116"+
    "\1\117\1\0\1\33\1\0\25\33\13\0\1\121\4\0"+
    "\1\122\6\0\1\115\1\0\3\33\6\0\14\33\1\116"+
    "\1\117\1\0\1\33\1\0\25\33\62\0\1\123\54\0"+
    "\1\115\1\0\3\33\6\0\14\33\1\116\1\117\1\0"+
    "\1\33\1\0\13\33\1\124\4\33\1\125\4\33\27\0"+
    "\1\115\1\0\3\33\6\0\14\33\1\116\1\117\1\0"+
    "\1\33\1\0\17\33\1\126\5\33\27\0\1\115\1\0"+
    "\3\33\6\0\14\33\1\116\1\117\1\0\1\33\1\0"+
    "\1\127\11\33\1\130\1\33\1\131\10\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\4\33\1\132\20\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\12\33"+
    "\1\133\3\33\1\134\6\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\1\135"+
    "\7\33\1\136\3\33\1\137\10\33\27\0\1\115\1\0"+
    "\3\33\6\0\14\33\1\116\1\117\1\0\1\33\1\0"+
    "\21\33\1\140\3\33\27\0\1\115\1\0\3\33\6\0"+
    "\14\33\1\116\1\117\1\0\1\33\1\0\5\33\1\141"+
    "\5\33\1\142\4\33\1\143\4\33\27\0\1\115\1\0"+
    "\3\33\6\0\14\33\1\116\1\117\1\0\1\33\1\0"+
    "\21\33\1\144\3\33\27\0\1\115\1\0\3\33\6\0"+
    "\14\33\1\116\1\117\1\0\1\33\1\0\4\33\1\145"+
    "\7\33\1\146\5\33\1\147\2\33\27\0\1\115\1\0"+
    "\3\33\6\0\14\33\1\116\1\117\1\0\1\33\1\0"+
    "\17\33\1\150\5\33\13\0\1\121\4\0\1\122\6\0"+
    "\1\115\1\0\3\33\6\0\14\33\1\116\1\117\1\0"+
    "\1\33\1\0\4\33\1\151\20\33\27\0\1\115\1\0"+
    "\3\33\6\0\14\33\1\116\1\117\1\0\1\33\1\0"+
    "\7\33\1\152\7\33\1\153\4\33\1\154\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\7\33\1\155\15\33\111\0\1\156\3\0\6\63"+
    "\1\157\43\63\1\65\35\63\6\0\1\160\101\0\6\63"+
    "\1\161\43\63\1\65\35\63\105\66\1\162\2\66\13\71"+
    "\1\163\36\71\1\73\35\71\16\77\1\164\71\77\2\100"+
    "\1\165\105\100\24\0\3\166\105\0\3\103\6\0\14\103"+
    "\3\0\1\103\1\0\25\103\31\0\2\167\1\103\6\0"+
    "\14\103\3\0\1\167\1\0\25\103\26\0\1\170\2\0"+
    "\3\171\6\0\14\103\3\0\1\103\1\0\25\103\31\0"+
    "\2\172\1\103\6\0\14\103\3\0\1\172\1\0\25\103"+
    "\31\0\3\173\6\0\4\173\10\103\3\0\1\173\1\0"+
    "\6\173\17\103\42\0\14\33\3\0\1\33\1\0\25\33"+
    "\31\0\3\174\61\0\2\175\3\0\102\175\23\0\1\115"+
    "\1\0\3\33\6\0\13\33\1\176\1\116\1\117\1\0"+
    "\1\33\1\0\25\33\5\0\6\121\1\177\43\121\1\200"+
    "\35\121\13\122\1\201\74\122\55\0\1\202\54\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\3\33\1\203\21\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\4\33"+
    "\1\204\20\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\20\33\1\205\1\206"+
    "\3\33\27\0\1\115\1\0\3\33\6\0\14\33\1\116"+
    "\1\117\1\0\1\33\1\0\1\207\24\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\13\33\1\210\11\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\1\33"+
    "\1\211\23\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\20\33\1\212\4\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\12\33\1\213\12\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\13\33\1\214\11\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\17\33"+
    "\1\215\5\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\4\33\1\216\20\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\20\33\1\217\4\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\4\33\1\220\20\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\16\33"+
    "\1\221\4\33\1\222\1\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\21\33"+
    "\1\223\3\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\12\33\1\224\12\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\21\33\1\225\3\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\17\33\1\226\5\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\22\33"+
    "\1\227\1\33\1\230\27\0\1\115\1\0\3\33\6\0"+
    "\14\33\1\116\1\117\1\0\1\33\1\0\15\33\1\231"+
    "\7\33\27\0\1\115\1\0\3\33\6\0\14\33\1\116"+
    "\1\117\1\0\1\33\1\0\10\33\1\232\14\33\6\0"+
    "\1\233\1\234\1\0\1\233\30\0\14\235\3\0\1\235"+
    "\1\0\25\235\5\0\16\77\1\164\4\77\1\236\64\77"+
    "\24\0\3\166\10\0\1\237\1\240\13\0\1\166\5\0"+
    "\1\237\1\240\50\0\2\167\1\103\6\0\7\103\1\241"+
    "\4\103\3\0\1\167\1\0\12\103\1\241\12\103\31\0"+
    "\3\242\105\0\3\171\6\0\7\103\1\243\4\103\3\0"+
    "\1\171\1\0\12\103\1\243\12\103\31\0\2\172\1\103"+
    "\6\0\7\103\1\244\4\103\3\0\1\172\1\0\12\103"+
    "\1\244\12\103\31\0\3\173\6\0\4\173\3\103\1\245"+
    "\4\103\3\0\1\173\1\0\6\173\4\103\1\245\12\103"+
    "\31\0\3\174\24\0\1\246\1\174\113\0\1\247\51\0"+
    "\1\115\1\0\3\33\6\0\14\33\1\116\1\117\1\0"+
    "\1\250\1\0\25\33\5\0\6\121\1\251\43\121\1\200"+
    "\35\121\1\0\1\252\1\253\1\0\1\252\30\0\14\254"+
    "\3\0\1\254\1\0\25\254\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\1\255"+
    "\24\33\27\0\1\115\1\0\3\33\6\0\14\33\1\116"+
    "\1\117\1\0\1\33\1\0\21\33\1\256\3\33\27\0"+
    "\1\115\1\0\3\33\6\0\14\33\1\116\1\117\1\0"+
    "\1\33\1\0\2\33\1\257\22\33\27\0\1\115\1\0"+
    "\3\33\6\0\14\33\1\116\1\117\1\0\1\33\1\0"+
    "\20\33\1\260\4\33\27\0\1\115\1\0\3\33\6\0"+
    "\14\33\1\116\1\117\1\0\1\33\1\0\21\33\1\261"+
    "\3\33\27\0\1\115\1\0\3\33\6\0\14\33\1\116"+
    "\1\117\1\0\1\33\1\0\22\33\1\262\2\33\27\0"+
    "\1\115\1\0\3\33\6\0\14\33\1\116\1\117\1\0"+
    "\1\33\1\0\4\33\1\263\20\33\27\0\1\115\1\0"+
    "\3\33\6\0\14\33\1\116\1\117\1\0\1\33\1\0"+
    "\20\33\1\227\4\33\27\0\1\115\1\0\3\33\6\0"+
    "\14\33\1\116\1\117\1\0\1\33\1\0\1\264\24\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\4\33\1\265\20\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\21\33\1\266\3\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\10\33"+
    "\1\267\14\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\12\33\1\270\12\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\22\33\1\271\2\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\14\33\1\272\10\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\4\33"+
    "\1\273\20\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\4\33\1\274\20\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\12\33\1\275\12\33\6\0\1\233"+
    "\1\234\1\0\1\233\103\0\6\234\1\276\43\234\1\277"+
    "\35\234\1\0\1\233\1\234\1\0\1\233\15\0\1\300"+
    "\1\0\3\235\6\0\14\235\3\0\1\235\1\0\25\235"+
    "\26\0\1\301\2\0\3\302\105\0\3\242\15\0\1\303"+
    "\7\0\1\242\13\0\1\303\41\0\1\304\155\0\1\305"+
    "\41\0\1\115\1\0\3\33\6\0\2\33\1\306\11\33"+
    "\1\116\1\117\1\0\1\33\1\0\25\33\6\0\1\252"+
    "\1\253\1\0\1\252\103\0\52\253\1\307\2\253\1\310"+
    "\32\253\1\0\1\252\1\253\1\0\1\252\15\0\1\311"+
    "\1\0\3\254\6\0\14\254\3\0\1\254\1\0\25\254"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\11\33\1\312\13\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\7\33\1\313\15\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\20\33"+
    "\1\314\4\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\10\33\1\315\14\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\6\33\1\316\16\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\12\33\1\317\12\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\1\320"+
    "\24\33\27\0\1\115\1\0\3\33\6\0\14\33\1\116"+
    "\1\117\1\0\1\33\1\0\1\321\24\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\13\33\1\322\11\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\17\33"+
    "\1\323\5\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\23\33\1\324\1\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\14\33\1\325\10\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\4\33\1\326\20\33\5\0\6\234\1\327\43\234"+
    "\1\277\37\234\3\0\102\234\36\0\14\235\3\0\1\235"+
    "\1\0\25\235\31\0\3\302\105\0\3\302\11\0\1\330"+
    "\13\0\1\302\6\0\1\330\61\0\14\331\3\0\1\331"+
    "\1\0\25\331\63\0\1\332\53\0\1\115\1\0\3\33"+
    "\6\0\7\33\1\333\4\33\1\116\1\117\1\0\1\33"+
    "\1\0\25\33\5\0\2\253\3\0\102\253\1\0\52\253"+
    "\1\307\2\253\1\334\32\253\35\0\14\254\3\0\1\254"+
    "\1\0\25\254\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\13\33\1\335\11\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\6\33\1\336\16\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\12\33\1\337\12\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\2\33"+
    "\1\340\22\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\13\33\1\341\11\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\13\33\1\342\11\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\5\33\1\343\17\33\5\0\6\234\1\344\43\234"+
    "\1\277\35\234\22\0\1\304\1\0\3\331\6\0\14\331"+
    "\1\116\2\0\1\331\1\0\25\331\103\0\1\345\33\0"+
    "\1\115\1\0\3\33\6\0\5\33\1\346\6\33\1\116"+
    "\1\117\1\0\1\33\1\0\25\33\5\0\52\253\1\307"+
    "\2\253\1\347\32\253\22\0\1\115\1\0\3\33\6\0"+
    "\14\33\1\116\1\117\1\0\1\33\1\0\22\33\1\350"+
    "\2\33\27\0\1\115\1\0\3\33\6\0\14\33\1\116"+
    "\1\117\1\0\1\33\1\0\4\33\1\351\20\33\27\0"+
    "\1\115\1\0\3\33\6\0\14\33\1\116\1\117\1\0"+
    "\1\33\1\0\24\33\1\352\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\7\33"+
    "\1\353\15\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\2\33\1\354\22\33"+
    "\103\0\1\355\33\0\1\115\1\0\3\33\6\0\3\33"+
    "\1\356\10\33\1\116\1\117\1\0\1\33\1\0\25\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\4\33\1\357\20\33\27\0\1\115"+
    "\1\0\3\33\6\0\14\33\1\116\1\117\1\0\1\33"+
    "\1\0\17\33\1\360\5\33\27\0\1\115\1\0\3\33"+
    "\6\0\14\33\1\116\1\117\1\0\1\33\1\0\4\33"+
    "\1\361\20\33\27\0\1\115\1\0\3\33\6\0\14\33"+
    "\1\116\1\117\1\0\1\33\1\0\14\33\1\362\10\33"+
    "\27\0\1\115\1\0\3\33\6\0\14\33\1\116\1\117"+
    "\1\0\1\33\1\0\5\33\1\363\17\33\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12096];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\4\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\2\11\3\1\1\11\3\1\2\11"+
    "\17\1\1\11\1\1\2\11\1\0\1\1\2\0\2\11"+
    "\1\0\1\11\1\0\3\11\2\0\1\11\1\0\6\1"+
    "\4\11\3\0\1\1\3\0\32\1\2\11\1\0\1\1"+
    "\1\11\1\1\1\0\1\11\2\1\1\0\3\1\2\0"+
    "\1\1\1\11\1\0\1\1\1\0\30\1\3\0\1\11"+
    "\1\0\1\11\6\1\1\0\2\1\3\0\21\1\4\0"+
    "\1\1\1\11\2\0\1\1\3\0\15\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\10\1\1\0\7\1\1\11"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _TinyScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TinyScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 93: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 94: break;
          case 3:
            { return OP_EXCLAM;
            }
          // fall through
          case 95: break;
          case 4:
            { return TERM_SHARP;
            }
          // fall through
          case 96: break;
          case 5:
            { return TERM_DOLLAR;
            }
          // fall through
          case 97: break;
          case 6:
            { return OP_MOD;
            }
          // fall through
          case 98: break;
          case 7:
            { return TERM_PAREN_L;
            }
          // fall through
          case 99: break;
          case 8:
            { return TERM_PAREN_R;
            }
          // fall through
          case 100: break;
          case 9:
            { return OP_MUL;
            }
          // fall through
          case 101: break;
          case 10:
            { return OP_ADD;
            }
          // fall through
          case 102: break;
          case 11:
            { return TERM_COMMA;
            }
          // fall through
          case 103: break;
          case 12:
            { return OP_SUB;
            }
          // fall through
          case 104: break;
          case 13:
            { return TERM_DOT;
            }
          // fall through
          case 105: break;
          case 14:
            { return OP_DIV;
            }
          // fall through
          case 106: break;
          case 15:
            { return TERM_CONST_NUMBER;
            }
          // fall through
          case 107: break;
          case 16:
            { return TERM_COLON;
            }
          // fall through
          case 108: break;
          case 17:
            { return TERM_SEMICOLON;
            }
          // fall through
          case 109: break;
          case 18:
            { return OP_LT;
            }
          // fall through
          case 110: break;
          case 19:
            { return OP_ASSIGN;
            }
          // fall through
          case 111: break;
          case 20:
            { return OP_GT;
            }
          // fall through
          case 112: break;
          case 21:
            { return TERM_QUESTION;
            }
          // fall through
          case 113: break;
          case 22:
            { return NAMING;
            }
          // fall through
          case 114: break;
          case 23:
            { return TERM_BRACKET_SQUARE_L;
            }
          // fall through
          case 115: break;
          case 24:
            { return TERM_BRACKET_SQUARE_R;
            }
          // fall through
          case 116: break;
          case 25:
            { return TERM_CURLY_L;
            }
          // fall through
          case 117: break;
          case 26:
            { return OP_VERTICAL_BAR;
            }
          // fall through
          case 118: break;
          case 27:
            { return TERM_CURLY_R;
            }
          // fall through
          case 119: break;
          case 28:
            { return OP_NE;
            }
          // fall through
          case 120: break;
          case 29:
            { return TERM_CONST_STRING;
            }
          // fall through
          case 121: break;
          case 30:
            { return OP_ASSIGN_MOD;
            }
          // fall through
          case 122: break;
          case 31:
            { return OP_AND;
            }
          // fall through
          case 123: break;
          case 32:
            { return TERM_CONST_STRING_SINGLE;
            }
          // fall through
          case 124: break;
          case 33:
            { return OP_ASSIGN_MUL;
            }
          // fall through
          case 125: break;
          case 34:
            { return OP_ASSIGN_ADD;
            }
          // fall through
          case 126: break;
          case 35:
            { return OP_ASSIGN_SUB;
            }
          // fall through
          case 127: break;
          case 36:
            { return OP_ASSIGN_DIV;
            }
          // fall through
          case 128: break;
          case 37:
            { return WORD;
            }
          // fall through
          case 129: break;
          case 38:
            { return OP_LTE;
            }
          // fall through
          case 130: break;
          case 39:
            { return OP_NEQ;
            }
          // fall through
          case 131: break;
          case 40:
            { return OP_EQ;
            }
          // fall through
          case 132: break;
          case 41:
            { return OP_GTE;
            }
          // fall through
          case 133: break;
          case 42:
            { return OP_AS;
            }
          // fall through
          case 134: break;
          case 43:
            { return OP_EQ_STR;
            }
          // fall through
          case 135: break;
          case 44:
            { return OP_GT_STR;
            }
          // fall through
          case 136: break;
          case 45:
            { return KEY_IF;
            }
          // fall through
          case 137: break;
          case 46:
            { return OP_IN;
            }
          // fall through
          case 138: break;
          case 47:
            { return OP_IS;
            }
          // fall through
          case 139: break;
          case 48:
            { return OP_LT_STR;
            }
          // fall through
          case 140: break;
          case 49:
            { return OP_NE_STR;
            }
          // fall through
          case 141: break;
          case 50:
            { return OP_OR_STR;
            }
          // fall through
          case 142: break;
          case 51:
            { return OP_OR;
            }
          // fall through
          case 143: break;
          case 52:
            { return REF_EXPRESS;
            }
          // fall through
          case 144: break;
          case 53:
            { return TERM_COMMENT_SINGLE_LINE;
            }
          // fall through
          case 145: break;
          case 54:
            { return TERM_CONST_NUMBER_FLOAT;
            }
          // fall through
          case 146: break;
          case 55:
            { return TERM_CONST_NUMBER_BIN;
            }
          // fall through
          case 147: break;
          case 56:
            { return TERM_CONST_NUMBER_SCIEN_1;
            }
          // fall through
          case 148: break;
          case 57:
            { return TERM_CONST_NUMBER_OTC;
            }
          // fall through
          case 149: break;
          case 58:
            { return TERM_CONST_NUMBER_HEX;
            }
          // fall through
          case 150: break;
          case 59:
            { return TERM_CONST_STRING_RENDER;
            }
          // fall through
          case 151: break;
          case 60:
            { return TERM_CONST_STRING_RENDER_SINGLE;
            }
          // fall through
          case 152: break;
          case 61:
            { return OP_AND_STR;
            }
          // fall through
          case 153: break;
          case 62:
            { return KEY_FOR;
            }
          // fall through
          case 154: break;
          case 63:
            { return OP_GTE_STR;
            }
          // fall through
          case 155: break;
          case 64:
            { return OP_LTE_STR;
            }
          // fall through
          case 156: break;
          case 65:
            { return OP_NEQ_STR;
            }
          // fall through
          case 157: break;
          case 66:
            { return KEY_NEW;
            }
          // fall through
          case 158: break;
          case 67:
            { return OP_NOT;
            }
          // fall through
          case 159: break;
          case 68:
            { return KEY_TRY;
            }
          // fall through
          case 160: break;
          case 69:
            { return TERM_COMMENT_MULTI_LINE;
            }
          // fall through
          case 161: break;
          case 70:
            { return ROUTE_NAMING;
            }
          // fall through
          case 162: break;
          case 71:
            { return OP_CAST;
            }
          // fall through
          case 163: break;
          case 72:
            { return KEY_ELSE;
            }
          // fall through
          case 164: break;
          case 73:
            { return TERM_CONST_NULL;
            }
          // fall through
          case 165: break;
          case 74:
            { return TERM_CONST_BOOLEAN;
            }
          // fall through
          case 166: break;
          case 75:
            { return TERM_CONST_NUMBER_SCIEN_2;
            }
          // fall through
          case 167: break;
          case 76:
            { return KEY_BREAK;
            }
          // fall through
          case 168: break;
          case 77:
            { return KEY_CATCH;
            }
          // fall through
          case 169: break;
          case 78:
            { return KEY_CLASS;
            }
          // fall through
          case 170: break;
          case 79:
            { return OP_NOT_IN;
            }
          // fall through
          case 171: break;
          case 80:
            { return KEY_THROW;
            }
          // fall through
          case 172: break;
          case 81:
            { return KEY_WHILE;
            }
          // fall through
          case 173: break;
          case 82:
            { return KEY_RETURN;
            }
          // fall through
          case 174: break;
          case 83:
            { return OP_TYPE_OF;
            }
          // fall through
          case 175: break;
          case 84:
            { return TERM_CONST_STRING_MULTILINE_QUOTE;
            }
          // fall through
          case 176: break;
          case 85:
            { return TERM_CONST_STRING_MULTILINE;
            }
          // fall through
          case 177: break;
          case 86:
            { return KEY_FINALLY;
            }
          // fall through
          case 178: break;
          case 87:
            { return KEY_FOREACH;
            }
          // fall through
          case 179: break;
          case 88:
            { return TERM_CONST_TYPE_CLASS;
            }
          // fall through
          case 180: break;
          case 89:
            { return KEY_ELIF;
            }
          // fall through
          case 181: break;
          case 90:
            { return KEY_CONTINUE;
            }
          // fall through
          case 182: break;
          case 91:
            { return KEY_DEBUGGER;
            }
          // fall through
          case 183: break;
          case 92:
            { return OP_INSTANCE_OF;
            }
          // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
