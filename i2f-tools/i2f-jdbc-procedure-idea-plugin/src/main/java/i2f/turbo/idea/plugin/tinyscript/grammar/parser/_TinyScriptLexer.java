// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TinyScriptLexer.flex

package i2f.turbo.idea.plugin.tinyscript.grammar.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static i2f.turbo.idea.plugin.tinyscript.grammar.psi.TinyScriptTypes.*;


public class _TinyScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\7\25"+
    "\2\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\36\1\40\1\41\2\42\1\43\1\42"+
    "\1\44\1\45\5\42\1\46\1\42\1\47\3\42\1\50"+
    "\1\51\1\42\1\52\1\53\1\54\1\0\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\42\1\70\1\71\1\42\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\42\1\102\1\50"+
    "\1\103\1\42\1\104\1\105\1\106\7\0\1\3\32\0"+
    "\1\107\u01df\0\1\107\177\0\13\107\35\0\2\3\5\0"+
    "\1\107\57\0\1\107\240\0\1\107\377\0\u0100\110";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\3\27\1\30\1\31\1\1\16\27\1\32\1\33"+
    "\1\34\1\35\1\0\1\36\3\0\1\37\1\40\1\0"+
    "\1\41\1\0\1\42\1\43\1\44\2\0\1\45\1\0"+
    "\3\46\1\17\2\46\1\47\1\50\1\51\1\52\3\0"+
    "\1\27\3\0\1\27\1\53\6\27\1\54\3\27\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\2\27\1\63\5\27"+
    "\1\64\1\36\1\0\1\36\1\65\1\41\1\0\1\66"+
    "\1\67\1\70\1\0\1\71\1\72\1\73\2\0\1\27"+
    "\1\74\1\0\1\75\1\0\1\76\11\27\1\77\1\100"+
    "\1\27\1\101\1\102\1\103\1\104\4\27\1\105\2\27"+
    "\3\0\1\106\1\0\1\67\1\70\2\71\1\72\1\73"+
    "\1\107\1\0\1\27\1\74\3\0\1\27\1\110\4\27"+
    "\1\111\4\27\1\112\2\27\1\113\2\27\4\0\1\114"+
    "\1\71\2\0\1\27\3\0\1\115\1\116\1\117\5\27"+
    "\1\120\1\27\1\121\1\27\1\122\1\0\1\114\1\107"+
    "\1\0\1\27\1\0\5\27\1\123\1\124\1\125\1\0"+
    "\1\27\1\126\2\27\1\127\1\130\1\27\1\131\1\132"+
    "\1\133\1\134\2\27\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\111\0\u016d\0\u01b6"+
    "\0\u01ff\0\u0248\0\111\0\111\0\u0291\0\u02da\0\111\0\u0323"+
    "\0\111\0\u036c\0\u03b5\0\u03fe\0\111\0\111\0\u0447\0\u0490"+
    "\0\u04d9\0\111\0\111\0\u0522\0\u056b\0\u05b4\0\111\0\111"+
    "\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc"+
    "\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\111"+
    "\0\u0a44\0\111\0\111\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1"+
    "\0\111\0\111\0\u0248\0\111\0\u0bfa\0\111\0\111\0\111"+
    "\0\u0c43\0\u0c8c\0\111\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0d1e"+
    "\0\u0df9\0\u0e42\0\111\0\111\0\111\0\111\0\u0e8b\0\u0ed4"+
    "\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u0522\0\u10d3"+
    "\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u0522\0\u1289\0\u12d2"+
    "\0\u131b\0\u1364\0\u0522\0\u13ad\0\u0522\0\u13f6\0\u143f\0\u1488"+
    "\0\u14d1\0\u0522\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\111"+
    "\0\111\0\u1687\0\u0a8d\0\111\0\u0248\0\u16d0\0\111\0\u1719"+
    "\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961"+
    "\0\111\0\u19aa\0\u0ff8\0\u19f3\0\u0522\0\u1a3c\0\u1a85\0\u1ace"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u0522"+
    "\0\u1d16\0\u0522\0\u0522\0\u0522\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a"+
    "\0\u1e83\0\u0522\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\111"+
    "\0\u2039\0\111\0\u0d1e\0\u2082\0\u0d1e\0\u0d1e\0\u0d1e\0\u20cb"+
    "\0\u2114\0\u215d\0\u0faf\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u0522"+
    "\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u0522\0\u23ee\0\u2437\0\u2480"+
    "\0\u24c9\0\u0522\0\u2512\0\u255b\0\u0522\0\u25a4\0\u25ed\0\u2636"+
    "\0\u267f\0\u26c8\0\u2711\0\u275a\0\111\0\u27a3\0\u27ec\0\u2835"+
    "\0\u287e\0\u28c7\0\u2910\0\u0522\0\u0522\0\u0522\0\u2959\0\u29a2"+
    "\0\u29eb\0\u2a34\0\u2a7d\0\u0522\0\u2ac6\0\u0522\0\u2b0f\0\u0522"+
    "\0\u2b58\0\111\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e"+
    "\0\u2d57\0\u2da0\0\u2de9\0\u0522\0\u0522\0\u2b58\0\u2e32\0\u2e7b"+
    "\0\u2c7c\0\u2ec4\0\u2f0d\0\u0522\0\u0522\0\u2f56\0\111\0\u0522"+
    "\0\u0522\0\u0522\0\u2f9f\0\u2fe8\0\u0522";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\6\34\1\35\1\34\1\36\3\34\1\37"+
    "\1\2\1\40\1\34\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\34\1\51\1\34\1\52\1\53"+
    "\1\54\2\34\1\55\1\34\1\56\1\34\1\57\1\34"+
    "\1\60\1\61\1\62\1\3\1\2\112\0\4\3\102\0"+
    "\1\3\33\0\1\63\56\0\6\64\1\65\44\64\1\66"+
    "\35\64\5\0\1\67\76\0\1\70\36\0\1\71\70\0"+
    "\1\72\76\0\13\73\1\74\37\73\1\75\35\73\32\0"+
    "\1\76\110\0\1\77\110\0\1\100\74\0\1\101\4\0"+
    "\1\102\6\0\1\103\100\0\1\104\1\0\3\24\7\0"+
    "\1\105\1\106\1\107\4\105\1\110\1\105\1\111\1\112"+
    "\1\105\3\0\1\24\1\0\1\105\1\106\2\105\1\107"+
    "\5\105\1\110\6\105\1\111\3\105\27\0\1\104\1\0"+
    "\3\24\7\0\2\105\1\107\4\105\1\110\4\105\3\0"+
    "\1\24\1\0\4\105\1\107\5\105\1\110\12\105\37\0"+
    "\1\113\1\114\107\0\1\115\110\0\1\116\100\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\25\34\27\0\1\117\1\0\3\34\7\0\2\34"+
    "\1\122\11\34\1\120\1\121\1\0\1\34\1\0\25\34"+
    "\13\0\1\123\4\0\1\124\6\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\25\34"+
    "\63\0\1\125\54\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\13\34\1\126\4\34"+
    "\1\127\4\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\17\34\1\130\5\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\1\131\11\34\1\132\1\34\1\133"+
    "\10\34\27\0\1\117\1\0\3\34\7\0\14\34\1\120"+
    "\1\121\1\0\1\34\1\0\4\34\1\134\20\34\27\0"+
    "\1\117\1\0\3\34\7\0\14\34\1\120\1\121\1\0"+
    "\1\34\1\0\12\34\1\135\3\34\1\136\6\34\27\0"+
    "\1\117\1\0\3\34\7\0\14\34\1\120\1\121\1\0"+
    "\1\34\1\0\1\137\7\34\1\140\3\34\1\141\10\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\21\34\1\142\3\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\5\34\1\143\5\34\1\144\4\34\1\145\4\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\21\34\1\146\3\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\4\34\1\147\7\34\1\150\5\34\1\151\2\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\17\34\1\152\5\34\13\0\1\123"+
    "\4\0\1\124\6\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\4\34\1\153\20\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\7\34\1\154\7\34\1\155\4\34"+
    "\1\156\27\0\1\117\1\0\3\34\7\0\14\34\1\120"+
    "\1\121\1\0\1\34\1\0\7\34\1\157\15\34\112\0"+
    "\1\160\3\0\6\64\1\161\44\64\1\66\35\64\6\0"+
    "\1\162\102\0\6\64\1\163\44\64\1\66\35\64\104\0"+
    "\1\70\4\0\106\70\1\164\2\70\13\73\1\165\37\73"+
    "\1\75\35\73\16\101\1\166\72\101\2\102\1\167\106\102"+
    "\24\0\3\170\106\0\3\105\7\0\14\105\3\0\1\105"+
    "\1\0\25\105\31\0\2\171\1\105\7\0\14\105\3\0"+
    "\1\171\1\0\25\105\26\0\1\172\2\0\3\173\7\0"+
    "\14\105\3\0\1\105\1\0\25\105\31\0\2\174\1\105"+
    "\7\0\14\105\3\0\1\174\1\0\25\105\31\0\3\175"+
    "\7\0\4\175\10\105\3\0\1\175\1\0\6\175\17\105"+
    "\43\0\14\34\3\0\1\34\1\0\25\34\31\0\3\176"+
    "\62\0\2\177\3\0\103\177\23\0\1\117\1\0\3\34"+
    "\7\0\13\34\1\200\1\120\1\121\1\0\1\34\1\0"+
    "\25\34\5\0\6\123\1\201\44\123\1\202\35\123\13\124"+
    "\1\203\75\124\56\0\1\204\54\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\3\34"+
    "\1\205\21\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\4\34\1\206\20\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\20\34\1\207\1\210\3\34\27\0"+
    "\1\117\1\0\3\34\7\0\14\34\1\120\1\121\1\0"+
    "\1\34\1\0\1\211\24\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\13\34"+
    "\1\212\11\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\1\34\1\213\23\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\20\34\1\214\4\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\12\34\1\215\12\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\13\34"+
    "\1\216\11\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\17\34\1\217\5\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\4\34\1\220\20\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\20\34\1\221\4\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\4\34"+
    "\1\222\20\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\16\34\1\223\4\34"+
    "\1\224\1\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\21\34\1\225\3\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\12\34\1\226\12\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\21\34\1\227\3\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\17\34"+
    "\1\230\5\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\22\34\1\231\1\34"+
    "\1\232\27\0\1\117\1\0\3\34\7\0\14\34\1\120"+
    "\1\121\1\0\1\34\1\0\15\34\1\233\7\34\27\0"+
    "\1\117\1\0\3\34\7\0\14\34\1\120\1\121\1\0"+
    "\1\34\1\0\10\34\1\234\14\34\6\0\1\235\1\236"+
    "\1\0\1\235\31\0\14\237\3\0\1\237\1\0\25\237"+
    "\5\0\16\101\1\166\4\101\1\240\65\101\24\0\3\170"+
    "\11\0\1\241\1\242\13\0\1\170\5\0\1\241\1\242"+
    "\50\0\2\171\1\105\7\0\7\105\1\243\4\105\3\0"+
    "\1\171\1\0\12\105\1\243\12\105\31\0\3\244\106\0"+
    "\3\173\7\0\7\105\1\245\4\105\3\0\1\173\1\0"+
    "\12\105\1\245\12\105\31\0\2\174\1\105\7\0\7\105"+
    "\1\246\4\105\3\0\1\174\1\0\12\105\1\246\12\105"+
    "\31\0\3\175\7\0\4\175\3\105\1\247\4\105\3\0"+
    "\1\175\1\0\6\175\4\105\1\247\12\105\31\0\3\176"+
    "\25\0\1\250\1\176\114\0\1\251\51\0\1\117\1\0"+
    "\3\34\7\0\14\34\1\120\1\121\1\0\1\252\1\0"+
    "\25\34\5\0\6\123\1\253\44\123\1\202\35\123\1\0"+
    "\1\254\1\255\1\0\1\254\31\0\14\256\3\0\1\256"+
    "\1\0\25\256\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\1\257\24\34\27\0"+
    "\1\117\1\0\3\34\7\0\14\34\1\120\1\121\1\0"+
    "\1\34\1\0\21\34\1\260\3\34\27\0\1\117\1\0"+
    "\3\34\7\0\14\34\1\120\1\121\1\0\1\34\1\0"+
    "\2\34\1\261\22\34\27\0\1\117\1\0\3\34\7\0"+
    "\14\34\1\120\1\121\1\0\1\34\1\0\20\34\1\262"+
    "\4\34\27\0\1\117\1\0\3\34\7\0\14\34\1\120"+
    "\1\121\1\0\1\34\1\0\21\34\1\263\3\34\27\0"+
    "\1\117\1\0\3\34\7\0\14\34\1\120\1\121\1\0"+
    "\1\34\1\0\22\34\1\264\2\34\27\0\1\117\1\0"+
    "\3\34\7\0\14\34\1\120\1\121\1\0\1\34\1\0"+
    "\4\34\1\265\20\34\27\0\1\117\1\0\3\34\7\0"+
    "\14\34\1\120\1\121\1\0\1\34\1\0\20\34\1\231"+
    "\4\34\27\0\1\117\1\0\3\34\7\0\14\34\1\120"+
    "\1\121\1\0\1\34\1\0\1\266\24\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\4\34\1\267\20\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\21\34"+
    "\1\270\3\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\10\34\1\271\14\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\12\34\1\272\12\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\22\34\1\273\2\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\14\34"+
    "\1\274\10\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\4\34\1\275\20\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\4\34\1\276\20\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\12\34\1\277\12\34\6\0\1\235\1\236\1\0"+
    "\1\235\104\0\6\236\1\300\44\236\1\301\35\236\1\0"+
    "\1\235\1\236\1\0\1\235\15\0\1\302\1\0\3\237"+
    "\7\0\14\237\3\0\1\237\1\0\25\237\26\0\1\303"+
    "\2\0\3\304\106\0\3\244\16\0\1\305\7\0\1\244"+
    "\13\0\1\305\41\0\1\306\157\0\1\307\41\0\1\117"+
    "\1\0\3\34\7\0\2\34\1\310\11\34\1\120\1\121"+
    "\1\0\1\34\1\0\25\34\6\0\1\254\1\255\1\0"+
    "\1\254\104\0\53\255\1\311\2\255\1\312\32\255\1\0"+
    "\1\254\1\255\1\0\1\254\15\0\1\313\1\0\3\256"+
    "\7\0\14\256\3\0\1\256\1\0\25\256\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\11\34\1\314\13\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\7\34"+
    "\1\315\15\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\20\34\1\316\4\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\10\34\1\317\14\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\6\34\1\320\16\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\12\34"+
    "\1\321\12\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\1\322\24\34\27\0"+
    "\1\117\1\0\3\34\7\0\14\34\1\120\1\121\1\0"+
    "\1\34\1\0\1\323\24\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\13\34"+
    "\1\324\11\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\17\34\1\325\5\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\23\34\1\326\1\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\14\34\1\327\10\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\4\34"+
    "\1\330\20\34\5\0\6\236\1\331\44\236\1\301\37\236"+
    "\3\0\103\236\37\0\14\237\3\0\1\237\1\0\25\237"+
    "\31\0\3\304\106\0\3\304\12\0\1\332\13\0\1\304"+
    "\6\0\1\332\62\0\14\333\3\0\1\333\1\0\25\333"+
    "\64\0\1\334\53\0\1\117\1\0\3\34\7\0\7\34"+
    "\1\335\4\34\1\120\1\121\1\0\1\34\1\0\25\34"+
    "\5\0\2\255\3\0\103\255\1\0\53\255\1\311\2\255"+
    "\1\336\32\255\36\0\14\256\3\0\1\256\1\0\25\256"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\13\34\1\337\11\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\6\34\1\340\16\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\12\34"+
    "\1\341\12\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\2\34\1\342\22\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\13\34\1\343\11\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\13\34\1\344\11\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\5\34"+
    "\1\345\17\34\5\0\6\236\1\346\44\236\1\301\35\236"+
    "\22\0\1\306\1\0\3\333\7\0\14\333\1\120\2\0"+
    "\1\333\1\0\25\333\104\0\1\347\33\0\1\117\1\0"+
    "\3\34\7\0\5\34\1\350\6\34\1\120\1\121\1\0"+
    "\1\34\1\0\25\34\5\0\53\255\1\311\2\255\1\351"+
    "\32\255\22\0\1\117\1\0\3\34\7\0\14\34\1\120"+
    "\1\121\1\0\1\34\1\0\22\34\1\352\2\34\27\0"+
    "\1\117\1\0\3\34\7\0\14\34\1\120\1\121\1\0"+
    "\1\34\1\0\4\34\1\353\20\34\27\0\1\117\1\0"+
    "\3\34\7\0\14\34\1\120\1\121\1\0\1\34\1\0"+
    "\24\34\1\354\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\7\34\1\355\15\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\2\34\1\356\22\34\104\0\1\357"+
    "\33\0\1\117\1\0\3\34\7\0\3\34\1\360\10\34"+
    "\1\120\1\121\1\0\1\34\1\0\25\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\4\34\1\361\20\34\27\0\1\117\1\0\3\34"+
    "\7\0\14\34\1\120\1\121\1\0\1\34\1\0\17\34"+
    "\1\362\5\34\27\0\1\117\1\0\3\34\7\0\14\34"+
    "\1\120\1\121\1\0\1\34\1\0\4\34\1\363\20\34"+
    "\27\0\1\117\1\0\3\34\7\0\14\34\1\120\1\121"+
    "\1\0\1\34\1\0\14\34\1\364\10\34\27\0\1\117"+
    "\1\0\3\34\7\0\14\34\1\120\1\121\1\0\1\34"+
    "\1\0\5\34\1\365\17\34\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12337];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\4\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\2\11\3\1\2\11\3\1\2\11"+
    "\17\1\1\11\1\1\2\11\1\0\1\1\3\0\2\11"+
    "\1\0\1\11\1\0\3\11\2\0\1\11\1\0\6\1"+
    "\4\11\3\0\1\1\3\0\32\1\2\11\1\0\1\1"+
    "\1\11\1\1\1\0\1\11\2\1\1\0\3\1\2\0"+
    "\1\1\1\11\1\0\1\1\1\0\30\1\3\0\1\11"+
    "\1\0\1\11\6\1\1\0\2\1\3\0\21\1\4\0"+
    "\1\1\1\11\2\0\1\1\3\0\15\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\10\1\1\0\7\1\1\11"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _TinyScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TinyScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 94: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 95: break;
          case 3:
            { return OP_EXCLAM;
            }
          // fall through
          case 96: break;
          case 4:
            { return TERM_SHARP;
            }
          // fall through
          case 97: break;
          case 5:
            { return TERM_DOLLAR;
            }
          // fall through
          case 98: break;
          case 6:
            { return OP_MOD;
            }
          // fall through
          case 99: break;
          case 7:
            { return TERM_PAREN_L;
            }
          // fall through
          case 100: break;
          case 8:
            { return TERM_PAREN_R;
            }
          // fall through
          case 101: break;
          case 9:
            { return OP_MUL;
            }
          // fall through
          case 102: break;
          case 10:
            { return OP_ADD;
            }
          // fall through
          case 103: break;
          case 11:
            { return TERM_COMMA;
            }
          // fall through
          case 104: break;
          case 12:
            { return OP_SUB;
            }
          // fall through
          case 105: break;
          case 13:
            { return TERM_DOT;
            }
          // fall through
          case 106: break;
          case 14:
            { return OP_DIV;
            }
          // fall through
          case 107: break;
          case 15:
            { return TERM_CONST_NUMBER;
            }
          // fall through
          case 108: break;
          case 16:
            { return TERM_COLON;
            }
          // fall through
          case 109: break;
          case 17:
            { return TERM_SEMICOLON;
            }
          // fall through
          case 110: break;
          case 18:
            { return OP_LT;
            }
          // fall through
          case 111: break;
          case 19:
            { return OP_ASSIGN;
            }
          // fall through
          case 112: break;
          case 20:
            { return OP_GT;
            }
          // fall through
          case 113: break;
          case 21:
            { return TERM_QUESTION;
            }
          // fall through
          case 114: break;
          case 22:
            { return TERM_AT;
            }
          // fall through
          case 115: break;
          case 23:
            { return NAMING;
            }
          // fall through
          case 116: break;
          case 24:
            { return TERM_BRACKET_SQUARE_L;
            }
          // fall through
          case 117: break;
          case 25:
            { return TERM_BRACKET_SQUARE_R;
            }
          // fall through
          case 118: break;
          case 26:
            { return TERM_CURLY_L;
            }
          // fall through
          case 119: break;
          case 27:
            { return OP_VERTICAL_BAR;
            }
          // fall through
          case 120: break;
          case 28:
            { return TERM_CURLY_R;
            }
          // fall through
          case 121: break;
          case 29:
            { return OP_NE;
            }
          // fall through
          case 122: break;
          case 30:
            { return TERM_CONST_STRING;
            }
          // fall through
          case 123: break;
          case 31:
            { return OP_ASSIGN_MOD;
            }
          // fall through
          case 124: break;
          case 32:
            { return OP_AND;
            }
          // fall through
          case 125: break;
          case 33:
            { return TERM_CONST_STRING_SINGLE;
            }
          // fall through
          case 126: break;
          case 34:
            { return OP_ASSIGN_MUL;
            }
          // fall through
          case 127: break;
          case 35:
            { return OP_ASSIGN_ADD;
            }
          // fall through
          case 128: break;
          case 36:
            { return OP_ASSIGN_SUB;
            }
          // fall through
          case 129: break;
          case 37:
            { return OP_ASSIGN_DIV;
            }
          // fall through
          case 130: break;
          case 38:
            { return WORD;
            }
          // fall through
          case 131: break;
          case 39:
            { return OP_LTE;
            }
          // fall through
          case 132: break;
          case 40:
            { return OP_NEQ;
            }
          // fall through
          case 133: break;
          case 41:
            { return OP_EQ;
            }
          // fall through
          case 134: break;
          case 42:
            { return OP_GTE;
            }
          // fall through
          case 135: break;
          case 43:
            { return OP_AS;
            }
          // fall through
          case 136: break;
          case 44:
            { return OP_EQ_STR;
            }
          // fall through
          case 137: break;
          case 45:
            { return OP_GT_STR;
            }
          // fall through
          case 138: break;
          case 46:
            { return KEY_IF;
            }
          // fall through
          case 139: break;
          case 47:
            { return OP_IN;
            }
          // fall through
          case 140: break;
          case 48:
            { return OP_IS;
            }
          // fall through
          case 141: break;
          case 49:
            { return OP_LT_STR;
            }
          // fall through
          case 142: break;
          case 50:
            { return OP_NE_STR;
            }
          // fall through
          case 143: break;
          case 51:
            { return OP_OR_STR;
            }
          // fall through
          case 144: break;
          case 52:
            { return OP_OR;
            }
          // fall through
          case 145: break;
          case 53:
            { return REF_EXPRESS;
            }
          // fall through
          case 146: break;
          case 54:
            { return TERM_COMMENT_SINGLE_LINE;
            }
          // fall through
          case 147: break;
          case 55:
            { return TERM_CONST_NUMBER_FLOAT;
            }
          // fall through
          case 148: break;
          case 56:
            { return TERM_CONST_NUMBER_BIN;
            }
          // fall through
          case 149: break;
          case 57:
            { return TERM_CONST_NUMBER_SCIEN_1;
            }
          // fall through
          case 150: break;
          case 58:
            { return TERM_CONST_NUMBER_OTC;
            }
          // fall through
          case 151: break;
          case 59:
            { return TERM_CONST_NUMBER_HEX;
            }
          // fall through
          case 152: break;
          case 60:
            { return TERM_CONST_STRING_RENDER;
            }
          // fall through
          case 153: break;
          case 61:
            { return TERM_CONST_STRING_RENDER_SINGLE;
            }
          // fall through
          case 154: break;
          case 62:
            { return OP_AND_STR;
            }
          // fall through
          case 155: break;
          case 63:
            { return KEY_FOR;
            }
          // fall through
          case 156: break;
          case 64:
            { return OP_GTE_STR;
            }
          // fall through
          case 157: break;
          case 65:
            { return OP_LTE_STR;
            }
          // fall through
          case 158: break;
          case 66:
            { return OP_NEQ_STR;
            }
          // fall through
          case 159: break;
          case 67:
            { return KEY_NEW;
            }
          // fall through
          case 160: break;
          case 68:
            { return OP_NOT;
            }
          // fall through
          case 161: break;
          case 69:
            { return KEY_TRY;
            }
          // fall through
          case 162: break;
          case 70:
            { return TERM_COMMENT_MULTI_LINE;
            }
          // fall through
          case 163: break;
          case 71:
            { return ROUTE_NAMING;
            }
          // fall through
          case 164: break;
          case 72:
            { return OP_CAST;
            }
          // fall through
          case 165: break;
          case 73:
            { return KEY_ELSE;
            }
          // fall through
          case 166: break;
          case 74:
            { return TERM_CONST_NULL;
            }
          // fall through
          case 167: break;
          case 75:
            { return TERM_CONST_BOOLEAN;
            }
          // fall through
          case 168: break;
          case 76:
            { return TERM_CONST_NUMBER_SCIEN_2;
            }
          // fall through
          case 169: break;
          case 77:
            { return KEY_BREAK;
            }
          // fall through
          case 170: break;
          case 78:
            { return KEY_CATCH;
            }
          // fall through
          case 171: break;
          case 79:
            { return KEY_CLASS;
            }
          // fall through
          case 172: break;
          case 80:
            { return OP_NOT_IN;
            }
          // fall through
          case 173: break;
          case 81:
            { return KEY_THROW;
            }
          // fall through
          case 174: break;
          case 82:
            { return KEY_WHILE;
            }
          // fall through
          case 175: break;
          case 83:
            { return KEY_RETURN;
            }
          // fall through
          case 176: break;
          case 84:
            { return OP_TYPE_OF;
            }
          // fall through
          case 177: break;
          case 85:
            { return TERM_CONST_STRING_MULTILINE_QUOTE;
            }
          // fall through
          case 178: break;
          case 86:
            { return TERM_CONST_STRING_MULTILINE;
            }
          // fall through
          case 179: break;
          case 87:
            { return KEY_FINALLY;
            }
          // fall through
          case 180: break;
          case 88:
            { return KEY_FOREACH;
            }
          // fall through
          case 181: break;
          case 89:
            { return TERM_CONST_TYPE_CLASS;
            }
          // fall through
          case 182: break;
          case 90:
            { return KEY_ELIF;
            }
          // fall through
          case 183: break;
          case 91:
            { return KEY_CONTINUE;
            }
          // fall through
          case 184: break;
          case 92:
            { return KEY_DEBUGGER;
            }
          // fall through
          case 185: break;
          case 93:
            { return OP_INSTANCE_OF;
            }
          // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
