# kafka 配置
i2f.springboot.config.kafka.enable=true

###############################################
# spring-kafka 配置
i2f.springboot.config.spring-kafka.enable=true
# 配置事务前缀
i2f.springboot.config.spring-kafka.tx-prefix=tx
# 设置是否开启批量监听
i2f.springboot.config.spring-kafka.batch-listener=false
# 设置消费者组中的线程数量
i2f.springboot.config.spring-kafka.concurrency=1
# 是否开启消费端失败监听日志
i2f.springboot.config.spring-kafka.consumer-error-log-listener.enable=true

####################################################
# 以下为kafka和spring-kafka的通用配置
####################################################

# 主机配置/集群地址
i2f.springboot.config.kafka.server-address=127.0.0.1:9092,127.0.0.1:9093


# 生产者配置
i2f.springboot.config.kafka.producer.enable=true
# 重试次数
i2f.springboot.config.kafka.retries=3
#应答级别
#acks=0 把消息发送到kafka就认为发送成功
#acks=1 把消息发送到kafka leader分区，并且写入磁盘就认为发送成功
#acks=all 把消息发送到kafka leader分区，并且leader分区的副本follower对消息进行了同步就任务发送成功
i2f.springboot.config.kafka.acks=all
#KafkaProducer.send() 和 partitionsFor() 方法的最长阻塞时间 单位 ms
i2f.springboot.config.kafka.max-block-ms=6000
#批量处理的最大大小 单位 byte
i2f.springboot.config.kafka.batch-size=4096
#发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
i2f.springboot.config.kafka.linger-ms=1000
#生产者可用缓冲区的最大值 单位 byte
i2f.springboot.config.kafka.buffer-memory-size=33554432
#每条消息最大的大小
i2f.springboot.config.kafka.max-request-size=104857
#客户端ID，默认spring.application.name
i2f.springboot.config.kafka.client-id=
#Key 序列化方式
i2f.springboot.config.kafka.key-serializer-class=org.apache.kafka.common.serialization.StringSerializer
#Value 序列化方式
i2f.springboot.config.kafka.value-serializer-class=org.apache.kafka.common.serialization.StringSerializer
#消息压缩：none、lz4、gzip、snappy，默认为 none。
i2f.springboot.config.kafka.compression-type=gzip
#自定义分区器
i2f.springboot.config.kafka.partitioner-class=


# 消费者配置
i2f.springboot.config.kafka.consumer.enable=true
#自动提交 offset 默认 true
i2f.springboot.config.kafka.enable-auto-commit=false
#自动提交的频率 单位 ms
i2f.springboot.config.kafka.auto-commit-interval-ms=1000
#批量消费最大数量
i2f.springboot.config.kafka.max-poll-records=100
#消费者组,默认spring.application.name
i2f.springboot.config.kafka.group-id=
#session超时，超过这个时间consumer没有发送心跳,就会触发rebalance操作
i2f.springboot.config.kafka.session-timeout-ms=120000
#请求超时
i2f.springboot.config.kafka.request-timeout-ms=120000
#Key 反序列化类
i2f.springboot.config.kafka.key-deserializer-class=org.apache.kafka.common.serialization.StringDeserializer
#Value 反序列化类
i2f.springboot.config.kafka.value-deserializer-class=org.apache.kafka.common.serialization.StringDeserializer
#当kafka中没有初始offset或offset超出范围时将自动重置offset
#earliest:重置为分区中最小的offset
#latest:重置为分区中最新的offset(消费分区中新产生的数据)
#none:只要有一个分区不存在已提交的offset,就抛出异常
i2f.springboot.config.kafka.auto-offset-reset=latest
#设置Consumer拦截器
i2f.springboot.config.kafka.interceptor-class=

