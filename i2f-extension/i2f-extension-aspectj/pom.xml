<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>i2f.turbo</groupId>
        <artifactId>i2f-extension</artifactId>
        <version>1.0</version>
    </parent>

    <artifactId>i2f-extension-aspectj</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>i2f.turbo</groupId>
            <artifactId>i2f-proxy</artifactId>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.6</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <archive>
                        <addMavenDescriptor>true</addMavenDescriptor>
                    </archive>
                </configuration>
            </plugin>

            <!--
            配置aspectj的注解编译器织入插件
            真正意义上的aspectj是在编译器通过修改织入类的代码实现的织入
            实际上就是和lombok原理一样，通过在编译器添加AnnotationProcessor实现注解处理
            在编译期修改生成的字节码，达到实现切面的目的
            这种方式，只需要在编译器使用这样的插件完成编译即可，不依赖于运行期
            也不会出现失效的情况
            同时，这种情况支持的切面类型更多，更完善

            而不是通常在springboot中使用的aspectj
            springboot中的aspectj只是使用代理的方式完成的织入，所以才会有 aspectj 失效的情况
            因为springboot是对配置在ApplicationContext中的Bean创建代理，在代理中进行实现aop
            因此，如果一个类，即使声明为 @Aspect 切面类，但是，如果没有配置为 spring-bean
            那么切面就不会生效，这个就是原因
            这种就是spring-aop的Aspectj方式，是在运行期实现的
            这种方式，由于是通过代理的方式实现的，因此支持的切面类型相对较少
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.15.0</version>
                <configuration>
                    <!-- 解决与 Lombok 的冲突 -->
                    <forceAjcCompile>true</forceAjcCompile>
                    <sources/>
                    <weaveDirectories>
                        <weaveDirectory>${project.build.directory}/classes</weaveDirectory>
                    </weaveDirectories>
                    <!-- JDK版本 -->
                    <complianceLevel>1.8</complianceLevel>
                    <source>1.8</source>
                    <target>1.8</target>
                    <!-- 展示织入信息 -->
                    <showWeaveInfo>true</showWeaveInfo>
                    <encoding>UTF-8</encoding>
                    <!--
                    重点！配置要织入的 maven 依赖
                    要对第三方依赖进行织入时，必须在此处包含进来，否则不会进行织入
                     -->
                    <!--<weaveDependencies>
                        <weaveDependency>
                            <groupId>org.apache.ibatis</groupId>
                            <artifactId>ibatis-sqlmap</artifactId>
                        </weaveDependency>
                    </weaveDependencies>-->
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
