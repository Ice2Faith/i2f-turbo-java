<!--
  * @author ${code.author}
  * @date ${_vm.format(${_vm.now()},"yyyy-MM-dd HH:mm:ss")}
  * @desc ${table.name} ${table.comment}
  -->
<template>
  <div>
    <div v-loading="isLoading">
      <div>
        <el-form ref="form" :inline="true" :model="form" :rules="rules">
            #foreach($item in ${table.columns})
              <el-form-item prop="${_vm.toCamel(${_vm.lower(${item.name})})}" label="${item.comment}">
                  #if(${item.javaType}=="Date")
                    <el-date-picker
                        v-model="form.${_vm.toCamel(${_vm.lower(${item.name})})}"
                        type="date"
                        value-format="yyyy-MM-dd"
                        clearable
                        placeholder="请选择${item.comment}"
                        :picker-options="pickerOptions"
                    />
                  #elseif(${item.javaType}=="Integer")
                    <el-select v-model="form.${_vm.toCamel(${_vm.lower(${item.name})})}"
                               clearable
                               allow-create
                               placeholder="请选择${item.comment}">
                      <el-option label="请选择" value=""/>
                      <el-option
                          v-for="item in dicts.${_vm.toCamel(${_vm.lower(${item.name})})}Dict"
                          :key="item.itemValue"
                          :label="item.itemText"
                          :value="item.itemValue"
                      />
                    </el-select>
                  #else
                    <el-input v-model="form.${_vm.toCamel(${_vm.lower(${item.name})})}"
                              clearable
                              placeholder="请输入${item.comment}"/>
                  #end
              </el-form-item>
            #end

          <el-row justify="center" type="flex">
            <el-form-item>
              <el-button type="primary" @click="search">
                查 询
              </el-button>
              <el-button
                  type="primary"
                  @click="reset('form')">
                重 置
              </el-button>
            </el-form-item>
          </el-row>
        </el-form>
        <el-row justify="start" type="flex">
          <el-button
              type="success"
              @click="addRecord">
            新 增
          </el-button>
        </el-row>
      </div>
      <el-table
          :data="table.data"
          border
          style="width: 100%">
        <template v-for="(item,index) in table.columns">
          <el-table-column
              v-if="item.fixed"
              :fixed="item.fixed"
              :prop="item.prop"
              :label="item.label"
              :width="item.width">
          </el-table-column>
          <el-table-column
              v-else
              :prop="item.prop"
              :label="item.label"
              :width="item.width">
          </el-table-column>
        </template>
        <template v-if="table.operations && table.operations.length>0">
          <el-table-column
              label="操作"
              fixed="right">
            <template slot-scope="scope">
              <el-button
                  v-for="(item,index) in table.operations"
                  size="mini"
                  :type="item.type"
                  @click="actionRecord(item.action,scope.${_vm.dolar}index, scope.row)">{{item.label}}
              </el-button>
            </template>
          </el-table-column>
        </template>
      </el-table>
      <el-row justify="end" type="flex">
        <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="page.index"
            :page-sizes="[100, 200, 300, 400]"
            :page-size="page.size"
            layout="total, sizes, prev, pager, next, jumper"
            :total="page.total">
        </el-pagination>
      </el-row>
    </div>
  </div>
</template>

<script>

  export default {
    components: {},
    data() {
      return {
        pickerOptions: {
          disabledDate(time) {
            return time.getTime() > Date.now()
          }
        },
        isLoading: false,
        page: {
          index: 1,
          size: 20,
          total: 0
        },
        dicts: {
            #foreach($item in ${table.columns})
                #if(${item.javaType}=="Integer")
                        ${_vm.toCamel(${_vm.lower(${item.name})})}Dict: [],
                #end
            #end
        },
        rules: {},
        form: {// 搜索表单
            #foreach($item in ${table.columns})
                #if(${item.javaType}=="Date")
                        ${_vm.toCamel(${_vm.lower(${item.name})})} : '${_vm.format(${_vm.now()},"yyyy-MM-dd")}',
                #elseif(${item.javaType}=="Integer")
                        ${_vm.toCamel(${_vm.lower(${item.name})})} : '',
                #else
                        ${_vm.toCamel(${_vm.lower(${item.name})})} : '',
                #end
            #end
        },
        table: {
          data: [],
          columns: [
              #foreach($item in ${table.columns})
                {
                  prop: '${_vm.toCamel(${_vm.lower(${item.name})})}',
                  label: '${item.comment}',
                  width: '120px',
                  // fixed: 'right'
                },
              #end
          ],
          operations: [
            {
              action: 'detail',
              type: 'info',
              label: '详情'
            },
            {
              action: 'edit',
              type: 'primary',
              label: '编辑'
            },
            {
              action: 'delete',
              type: 'danger',
              label: '删除'
            }
          ]
        },

      }
    },
    computed: {},
    created() {
      this.search()
    },
    methods: {
      handleSizeChange(val) {
        this.page.size = val;
        this.pageChange(this.page);
      },
      handleCurrentChange(val) {
        this.page.index = val;
        this.pageChange(this.page);
      },
      pageChange(page) {
        this.page = page;
        this.search();
      },
      // 查询
      search() {
        this.isLoading = true;

        const params = Object.assign({}, this.form);
        this.${_vm.dolar}axios({
          url: '${code.api}/${_vm.toCamel(${_vm.lower(${table.name})})}/page/' + this.page.size + '/' + (this.page.index - 1),
          method: 'get',
          params: params
        })
            .then(({resp: {data: data}}) => {
                  this.page.total = data.total;
                  this.page.index = data.index + 1;
                  this.page.size = data.size;

                  this.table.data = data.list;

                }
            )
            .catch(() => {
            })
            .finally(() => {
              this.isLoading = false
            })
      },
      // 重置
      reset(formName) {
        this.${_vm.dolar}refs[formName].resetFields()
      },
      addRecord() {

      },
      actionRecord(action, index, row) {
        if (action == 'detail') {
          this.detailRecord(index, row);
        } else if (action == 'edit') {
          this.editRecord(index, row);
        } else if (action == 'delete') {
          this.deleteRecord(index, row);
        }
      },
      detailRecord(index, row) {

      },
      editRecord(index, row) {

      },
      deleteRecord(index, row) {

      }
    }
  }
</script>
<style lang="scss" scoped>

</style>
